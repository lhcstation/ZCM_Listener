// THIS IS AN AUTOMATICALLY GENERATED FILE.
// DO NOT MODIFY BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _SCU_CAN_STS_h
#define _SCU_CAN_STS_h

#ifdef __cplusplus
extern "C" {
#endif

#define SCU_CAN_STS_IS_LITTLE_ENDIAN 0
typedef struct _SCU_CAN_STS SCU_CAN_STS;
struct _SCU_CAN_STS
{
    int8_t     LngCtrlMode;
    int32_t    LngAutoCheckReport;
    int32_t    LngQuitReport;
    int8_t     GearLeverIntv;
    int8_t     BrkPedalSt;
    int16_t    ActVehWheelTorq;
    int16_t    VehWheelTorqMax;
    float      GasPedalAcPst;
    int8_t     AccElecECFail;
    int8_t     VehRdySt;
    int8_t     VehDrvMod;
    int8_t     VehRng;
    int8_t     CrntGearLvl;
    float      VehSpd;
    int8_t     ABSActiveSt;
    int8_t     CDDAvailable;
    int8_t     AEBAvailable;
    int8_t     CDDFail;
    int8_t     CDDActive;
    int8_t     AEBActive;
    int8_t     VehicleStandStillSt;
    float      ActVehLongAccel;
    float      VehLongAccelOffset;
    int8_t     SysSt;
    int8_t     SwitchSt;
    int8_t     FailSt;
    int8_t     LatCtrlMode;
    int32_t    LatAutoCheckReport;
    int32_t    LatQuitReport;
    int8_t     StrngWhlIntv;
    float      SteeringAngle;
    int8_t     SteeringAngleVD;
    int8_t     SteeringAngleSpd;
    int8_t     SteeringAngleSpdVD;
    float      StrngWhlTorq;
    int8_t     StrngWhlTorqVD;
    int8_t     WarnLamp;
    float      ActVeLaltrlAccel;
    float      VehLaltrlAccelOffset;
    float      YawRate;
    float      YawRateOffset;
};

/**
 * Create a deep copy of a SCU_CAN_STS.
 * When no longer needed, destroy it with SCU_CAN_STS_destroy()
 */
SCU_CAN_STS* SCU_CAN_STS_copy(const SCU_CAN_STS* to_copy);

/**
 * Destroy an instance of SCU_CAN_STS created by SCU_CAN_STS_copy()
 */
void SCU_CAN_STS_destroy(SCU_CAN_STS* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _SCU_CAN_STS_subscription_t SCU_CAN_STS_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * SCU_CAN_STS is received.
 */
typedef void(*SCU_CAN_STS_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const SCU_CAN_STS* msg, void* userdata);

/**
 * Publish a message of type SCU_CAN_STS using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int SCU_CAN_STS_publish(zcm_t* zcm, const char* channel, const SCU_CAN_STS* msg);

/**
 * Subscribe to messages of type SCU_CAN_STS using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to SCU_CAN_STS_unsubscribe.
 */
SCU_CAN_STS_subscription_t* SCU_CAN_STS_subscribe(zcm_t* zcm, const char* channel, SCU_CAN_STS_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by SCU_CAN_STS_subscribe()
 */
int SCU_CAN_STS_unsubscribe(zcm_t* zcm, SCU_CAN_STS_subscription_t* hid);
/**
 * Encode a message of type SCU_CAN_STS into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to SCU_CAN_STS_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int SCU_CAN_STS_encode(void* buf, uint32_t offset, uint32_t maxlen, const SCU_CAN_STS* p);

/**
 * Decode a message of type SCU_CAN_STS from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with SCU_CAN_STS_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int SCU_CAN_STS_decode(const void* buf, uint32_t offset, uint32_t maxlen, SCU_CAN_STS* msg);

/**
 * Release resources allocated by SCU_CAN_STS_decode()
 * @return 0
 */
int SCU_CAN_STS_decode_cleanup(SCU_CAN_STS* p);

/**
 * Check how many bytes are required to encode a message of type SCU_CAN_STS
 */
uint32_t SCU_CAN_STS_encoded_size(const SCU_CAN_STS* p);

// ZCM support functions. Users should not call these
int64_t  __SCU_CAN_STS_get_hash(void);
uint64_t __SCU_CAN_STS_hash_recursive(const __zcm_hash_ptr* p);
int      __SCU_CAN_STS_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const SCU_CAN_STS* p, uint32_t elements);
int      __SCU_CAN_STS_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, SCU_CAN_STS* p, uint32_t elements);
int      __SCU_CAN_STS_decode_array_cleanup(SCU_CAN_STS* p, uint32_t elements);
uint32_t __SCU_CAN_STS_encoded_array_size(const SCU_CAN_STS* p, uint32_t elements);
uint32_t __SCU_CAN_STS_clone_array(const SCU_CAN_STS* p, SCU_CAN_STS* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
